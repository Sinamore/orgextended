// We start with some of the more well known file level comments.
// NOTE: There are many more comments than these.
//       this is just some of the more common ones.

// The filetags comment lets you tag all headings in a file with a tag.
#+FILETAGS: :Ian:Tagged:

// The startup comment controls how the file is displayed on startup
// Some common options are: 
// overview content  showall showeverything - These control how startup folding is handled.
// noinlineimages inlineimages              - These let you have the system show images inline in the document by default
// logdone                                  - This tells the system to add a log message when you close a task.
#+STARTUP: content logdone

// The TODO cycle of a task can be the default, set in your settings file or set
// here in a comment on a per file basis.
//#+TODO: A B C | D E


// The ARCHIVE comment lets you control how headings are archived from this file.
// You can do this globally from your settings file OR you can do it on a per file basis.
//
// While this basic heading works if you add your own extension you need
// to add to validOrgExtensions in the sublime-settings
// file. Otherwise the DB will not know about your file extension
// and will reject the archive file when you go to archive your data.
#+ARCHIVE: %s_archive::* Archive


// Priorities are another type of tag you can add to a heading.
// You can set your own priority list using a comment like so.
// While these are supported they are not highlighted like A B C D E are
// I hope some day we can support syntax extensions to make this possible.
#+PRIORITIES: 1 2 3 4 5

// This comment is for html export.
#+HTML_STYLE: refined

// These are some basic comments that can show up during export and
// can be useful in some types of documents.
#+AUTHOR:   Ian Davids
#+TITLE:    Org Mode Test File
#+LANGUAGE: en
#+DATE:     March 20 2018
#+EMAIL:    myemail@mydomain.com
#+OPTIONS: 

#+TODO: TODO(!) WAIT(@) | DONE

* Introduction
  This is a simple test file that has a bunch of the core Org Extended features in it.
  Org is huge and adding all of the features in org to a single file would be a very very large document.

  This is however a little playground of some of the more common aspects of Org.

  If all you do is look at this file you are missing out on a LOT of orgmode features.
  You should look at:

  - Keybindings - This will give you some overview of the bits we have bound for ease of use.
  - Commands    - Typing "Org" in to the command panel is a quick way to browse the available commands.
                  <hopefully we will eventually support a self documenting command to let the commands speak for themselves" 
  - Documentation - orgextended_docs is a repo full of orgmode files to help you learn about orgmode. Its not the best, but what I have had time to write.
  - Worklog - Sometimes it can be handy to paruse our worklog to look at what I have been working on recently. "Org Show Worklog" will bring that up for you.

 
* Basic Headings

  A heading or node in org mode is similar to a heading in markdown. Markdown uses # to denote a heading, org uses stars.
  The more stars, the deeper the sub heading.

  I am only supporting 7 levels of headings.
  Sub headings simply nest inside the parent heading.

  Org has commands to help you add and remove headings, move them around, change their indent and jump around.

** Heading 2
*** Heading 3
**** Heading 4
***** Heading 5
****** Heading 6
******* Heading 7
******** Heading 8
********* Heading 9


* Tags                                                                    :TAG1:TAG2:
  Tags are a means of filtering your headings in this file or across all your files.
  Tags are meta data that you can attach to your headings. The tags apply to a heading and all
  sub headings.

** This heading will have TAG1 and TAG2 on it. :OTHERTAGS:
   BUT this heading will be the only heading with the OTHERTAGS tag applied.

* TODO States
  States are a means of turning a regular heading into a task. Org has the concept that TODO lists
  can, should and do appear all over your notes. For that reason orgmode has the ability to find those
  todos and present them in various agenda views. TODO's flow through states. Those states are defined by you.

  I have not found a good way to make syntax highlighting extensible SO as a compromise, while the active todo
  states ARE configurable (see the comment #+TODO above) the syntax highlighting of those states is limited to the
  states that I have setup.

  I am often adding new states. I have several closed states like:

  *** NOTE This marks this as a note
  *** PHONE This marks this as notes from a telephone call.
  *** MEETING This marks this as notes from a meeting.

* Drawers
  :MYDRAWER:
  Anything can go in here
  :END:

  One of the features of org is the concept of a drawer. A drawer is a generic section that can contain any meta data.
  Drawers get auto folded away to avoid clutter unless you are editing them. 

* Properties and the LogBook
  :PROPERTIES:
  :ORDERED:  t
  :END:
  :LOGBOOK:
  - This is a line
  :END:
  
  Properties are a special drawer. The contain key/value pairs that are often accessible by other subsystems in org mode.
  As an example a common use of the property drawer is to store Effort which is used by column view to estimate the epected effort of tasks.
  Another example might be variables and constants used in tables, or enabling features for checkboxes and other systems.

  In addition to the property drawer, another common drawer is the LOGBOOK. The logbook is where clocking information tends to get stored
  when you are tracking the time spent on tasks. OR It can be used to store notes related to closing out a task.

  One special use of the property drawer is to add an ID or CUSTOM_ID field (IDs should be guids while CUSTOM IDs are yours to generate as long as they are unique)
  These can be used to reference a heading in your org files.

  - "Org Create Heading Id" - will generate an ID (guid) for you.
  - "Org Insert CustomId"   - will prompt you to insert your own custom id.

* orgmode (vs true orgmode compat) bits
  These items are NOT true org mode things but come
  from the previous ST2 orgmode package. I felt they were worth
  supporting and have kept them. I do not think being purist is
  super helpful when it comes to helping out the sublime community

	~ This is a break
	--- This is a page break ---

	-> For Follow Up
	=> For Follow Up

* Lists
  Orgmode has support for 5 types of lists:

  + Plus unordered list
  + More stuff

  - Basic unordered list
  - More stuff

  - [ ] Checkbox lists
  - [ ] More stuff

  1. Numbered list
  2. More stuff

  - Definition1 :: This is what it means
  - Definition2 :: This is what that means

  The ctrl + enter do what I mean editing feature allows you to quickly build lists of this type.
  We support sorting and nested lists.

* Checkboxes [33%]
  
  Checkboxes deserve their own section.
  The do what I mean toggle command also works on checkboxes

  Summary boxes [/] and [%] are auto updated when you toggle
  a checkbox. Summary boxes also work on the heading (see above.) 

  - [ ] Checkbox
  - [x] Blocked checkbox
  - [-] Checked checkbox [1/3]
      - [ ] sub
      - [ ] sub2
      - [x] sub3

* Links

  Links in org mode are complex. Our link handler still needs some work but will hopefully improve over time.
  Our link handler supports the concept of a protocol. You can write your own protocol handlers.

  http: is a built in protocol, so is file: by default the system assumes that a link references a file.
  Links can have a descript or not:

  - [[testfile.org]]
  - [[testfile.org][TestFile]]

  The system aggressively tries to fold the link if a description is present. In Emacs, Emacs would hide ALL of the link bits only showing the target
  making it look like a hyperlink on a website. We can't quite do that in sublime, but we try our best.
  
  NOTE: Folding is not perfect but I find folding the actual ref itself
        is a reasonable compromise.

  - [[https://reg.ca][Reg Ca]] Org link

  Links can be followed simply by pressing enter on the link.
  This makes orgmode something like a mini wiki. 

*** IDs and CUSTOM_IDs
  Links can also reference an ID or CUSTOM_ID:

   #+BEGIN_EXAMPLE
    <URL>::#<ID>
   #+END_EXAMPLE

  - [[file:C:\Users\ihdav\AppData\Roaming\Sublime Text\Packages\OrgExtended\testfile.org::#33da3712-51b7-485c-b69d-f54dd266543f][ID Creation]] 
  - [[file:C:\Users\ihdav\AppData\Roaming\Sublime Text\Packages\OrgExtended\testfile.org::#My-Custom-Id][Custom Id]] 

*** Anchors or Internal Targets

  Another form of targetting is linking to an internal anchor.
  This is a link to a target internal to this org file.
  A good HTML exporter should turn that target into a propper anchor in the file.

  #+BEGIN_EXAMPLE
    <URL>::<TARGET>
  #+END_EXAMPLE

  - [[Target1][Link To Target1]]
  - [[testfile.org::Target1][Link To Target1]]
  
  Org has the ability to "name" an object like a table. Names are assigned using the name comment:
  #+BEGIN_EXAMPLE
    #+NAME: my-name
  #+END_EXAMPLE

  These links behave just like file anchors or targets:
  #+BEGIN_EXAMPLE
    <URL>::<NAME>
  #+END_EXAMPLE

  - [[MyNamedObject][Link to Named Object]]
  - [[testfile.org::MyNamedObject][Link to Named Object]]

*** Targetting Headings
  Headings are also targettable. Here you use ::* as a means of indicating the header is your target.
  #+BEGIN_EXAMPLE
    <FILE>::*<HEADING>
  #+END_EXAMPLE

  - [[file:testfile.org::*Scheduling][Scheduling]]

*** An Anchor for target practice.
  Here is a target so we can link to it from the Link To Target above.
  <<Target1>>

* Scheduling

  There are 4 important timestamps that can appear in any heading.
  These first 3 should always appear right after the heading:

  SCHEDULED: <2020-05-25 Thu 10:50 +1d> - This is when you want to START on a task
  CLOSED: [2020-05-25 Mon]              - When enabled this will track when you closed the task (moved to a done state)
  DEADLINE: <2020-05-25 Tue>            - This is when the task should be "done by" or closed.

  Scheduled and Deadline are used by the agenda to track open tasks. There is 1 more type of timestamp used by the agenda
  which is simply the active timestamp: <2021-03-19 Fri 13:23> 

  An active timestamp means it gets picked up by the agena as the datetime of an appointment (rather than a task)
  Inactive timestamps do not get considered by the agenda: [2021-03-19 Fri 13:24] 

  Timestamps are complex beasts in org. They can have warnings -2d, recurrence +1w or span some time 12:00-13:45
  For more information please see the org manual.

* Navigation

  Ctrl arrow key travels up and down the tree of headings

  - "Org Jump In File" gives you a quick way to jump around in a file. (NOTE symbols work as well but sometimes the indent is helpful)
  - "Org Jump To Today" and "Org Jump To CustomId" are quick ways of jumping to headings with CUSTOM_ID tags (today is a special CUSTOM ID)

* Archive, Refile, Copy

  There are commands for archiving, refiling and copying headings around.

  - "Org Archive Subtree" - will copy the subtree to this files archive target.
  - "Org Refile" - will attempt to let you refile the current heading somewhere in your orgDir.
  - "Org Copy Entity" "Org Copy Subtree" also try to let you copy around headings as needed.

* Capture
  
  One of the biggest features I can't do without is the quick capture keybindings and templates.
  I have a system for this in place. 

  Capture templates are snippets! You have to define them!
  You define some snippets and then add capture entries into your settings file. Once you have done this
  You can quick capture from anywhere into the apropriate org target. 

* Control Comments

  As seen above there are a lot of control comments. Many of them are poorly documented at this time.
   
   #+PRIORITIES: A B C
   #+TITLE: Orgmode example file
   
* Src Block

  Org Babel Mode or Org Source Blocks are one of the cornerstones of Org Mode. Org Mode WAS the original Jupyter notebooks.
  Right now in our implementation we only have a very small number of actual source handlers for executing code. 
  (powershell, python, ditaa, plantuml, graphviz) Hopefully that will grow.

  We will also document how to add your own handlers going forward.

  That said we support quite a long list of language highlighting options for the moment. The list of languages we can highlight can be found
  in languagelist.yaml. That list is used to generate the syntax. If you would like a language added to the list please let me know. (or fire me a PR)

  Here are some examples:

  #+ATTR_LATEX: :options commentstyle=\bfseries
	#+BEGIN_SRC python
    def func(a):
        print("hello world")
    func('hi')
	#+END_SRC

	#+BEGIN_SRC cpp
	class MyClass
	{
	public:
		MyClass(int x, int y) {}
	}
	#+END_SRC

	#+BEGIN_SRC C
	void main(int x, int y)
	{
		printf("hello world\n");
	}
	#+END_SRC

	#+begin_src js
	function myfunc(x , y) {
		console.log("Hello World")
	}
	#+end_src

	#+begin_src xml
	<mytag attribute="hello">
		Some inner text
	</mytag>
	#+end_src

  #+BEGIN_SRC plantuml
    a -> b
    b -> c
  #+END_SRC

  #+BEGIN_SRC graphviz
  diagram G {
    a -> b;
    b -> c;
  }
  #+END_SRC

  #+BEGIN_SRC bat
    REM Comment line
    @echo off
    hi=%1
  #+END_SRC

  #+BEGIN_SRC regexp
    \s+(?P<name>[a-z])\s+
  #+END_SRC 

  #+BEGIN_SRC org
  * Heading
  :PROPERTIES:
  :END:
  #+END_SRC 

 #+BEGIN_SRC md
### Markdown
    But rules have to be followed here so things have to be right aligned in the block.
```cpp
    printf("");
```
 #+END_SRC 

** Babel

  The tower of babel or babelfish is the inspiration for the name of this feature in Emacs. This feature has its roots in:

  - Literate Programming
  - Reproducible Research

  That said, babel can be used for a LOT of other things. From generating diagrams in documents and presentations to 
  development / visualizing some gathered data.

  With babel a named data table, variable definition or list can act as input for a source block.

   #+NAME: in-table
   | a | b | c | d | e |
   | 1 | 2 | 3 | 4 | 5 |
   | 6 | 7 | 8 | 9 | 0 |
   
   #+BEGIN_SRC powershell :var DATA=in-table
     $DATA | %{"$_"}
   #+END_SRC

   #+RESULTS:
   | a | b | c | d | e |
   | 1 | 2 | 3 | 4 | 5 |
   | 6 | 7 | 8 | 9 | 0 |

   #+BEGIN_SRC python :var DATA=in-table :results table
     print(str(DATA))
   #+END_SRC

   #+RESULTS:
   | a | b | c | d | e |
   | 1 | 2 | 3 | 4 | 5 |
   | 6 | 7 | 8 | 9 | 0 |

*** Graphing

  If you have the right tools installed and in your path, this includes things like graphs of data:

    #+BEGIN_SRC graphviz :file images/graphviz.png
     digraph G {
       a -> b;
       a -> c;
       c -> d;
     } 
    #+END_SRC

    #+RESULTS:
    [[file:images\graphviz.png]]

    Diagrams using plantuml or ditaa.

    #+BEGIN_SRC plantuml :file images/plantuml.png
      Bob -> Sally : Says Hi
      Sally -> Bob : Says Hi
    #+END_SRC

    #+RESULTS:
    [[file:images\plantuml.png]]

    Or Graphs using GNU Plot

    #+PLOT: title:"Lines" ind:2 deps:(3 4)  with:lines file:images/plot.png
    |    Sede   |  Max   | H-index |  top  |
    |-----------+--------+---------+-------|
    | Sao Paolo |  71.00 |   11.50 |  13.5 |
    | Stockholm | 134.19 |   14.33 | 16.33 |
    | Leeds     | 165.77 |   19.68 | 21.68 |
    | Morelia   | 257.56 |   17.67 | 19.67 |
    | Chile     | 257.72 |   21.39 | 23.39 |
    #+TBLFM:$4=$3+2.0

    #+RESULTS:

* Bold Italics Underline

  Being a document interchange format org mode has support for the usual formatting suspects:

    *bold*
    /italic/
    _underline_
    +strikethrough+
    ~code~
    =verbatim=

* Example, Verse, Quote, Center

  Org also has support for quite a few simple example quote or verse blocks

    #+begin_example
    This is an example of something
    in a block
    #+end_example

    #+BEGIN_QUOTE
    This is a quote from something.
    #+END_QUOTE

    #+BEGIN_VERSE
    A verse of poetry
    #+END_VERSE

    #+BEGIN_CENTER
    A verse of poetry
    #+END_CENTER

    Some of these have snippets to help in creating them:

    #+BEGIN_EXAMPLE
      <s 
      <e
    #+END_EXAMPLE


* NOTE [#TOP] Priorities
   General user defined priority tags work
   but a, b, c, d, e have independent
   coloring options in the grammar.
** TODO [#A] Top priority
   A body for this work item
*** NEXT [#B] Second priority
**** TODO [#C] Third priorty item
***** TODO [#D] Third priorty item
****** BLOCKED [#E] Third priorty item

* Inline Images
  Links can be used to show images or open
  up an image viewer if followed.

  Run: "Org Show Image: on this link
  Notice that this link is an HTML link, org can download and cache images locally for display purposes.
  This will have problems for redirects, git lfs or other complex links.

  #+CAPTION:   This is a caption for this image
  #+ATTR_HTML: :width 200
    [[https://raw.githubusercontent.com/ihdavids/orgextended_docs/master/images/orgstart.gif]]



* Table Editor
  At the moment I am using the Table Editor plugin for my table navigation, creation and manipulation.
  The Alt and Shift + Alt plus arrow keys in a table will move rows and columns around and add them. Also "Alt+o t -"
  will insert a hline below your cursor.

  #+CAPTION: This is a table caption
  |   Heading 1    | Heading 2 | Heading 3 |
  |----------------+-----------+-----------|
  | Some data      |         1 |         3 |
  | More data      |         2 |         4 |
  |----------------+-----------+-----------|
  | Something else |         5 |         6 |


  However, this is just the begining. Tables can act like spreadsheets! 

  #+ATTR_LATEX: :environment pmatrix :mode math
  | a | b |
  | 1 | 5 |
  #+TBLFM:@2$2=$1*5

  Here 2,2 (b) is filled in by taking 2,1 and multiplying it by 5.
  There are a whole gamut of features, expressions, plotting and other table machinations available
  and that is best left for the docs.

* Dynamic Blocks

  Dynamic Blocks are kind of like source blocks (listed above) but for generic code snippets. Emacs
  makes these really really powerful since you can define new code snippets and functions ANYWHERE in the editor.

  Sublime cannot do that, so instead we use a sub folder with python snippets in your User folder.
  There are also a couple of built in blocks that we will talk about later. We have a test one that is always present:
  called insertdatetime. Execute this block by pressing <space> c c or Alt + o + c + c and it will replace the block contents
  with the current date and time.
  
  #+BEGIN: insertdatetime
  If you run this, this text will be replaced with the current datetime
  #+END:

** Clocking
   Another built in dynamic block that can be really handy is the clock table.
   If you are preparing invoices and want to know how long you spent on various tasks, the clock table can be pretty handy.
 
   Clocking is a built in org function. It uses a central data file in your User folder and a timestamp in your property drawer to track
   how long you have spent on a task.
 
   - "Org Clock In"  - Starts the clock on a task.
   - "Org Clock Out" - Stops the clock
 
   Running the table below will generate a table with your clocked data:
 
   #+BEGIN: clocktable :scope subtree :level 2
   |Heading|Time|
   |-
   |A|B|
   #+END:
 
   NOTE Clocking and the column view mode in emacs (which we don't fully support yet) go hand in hand as effort estimate vs actual time spent.

*** A task with some time invested
    :PROPERTIES:
     CLOCK: [2020-03-31 Tue 16:28]--[2020-03-31 Tue 16:29] => 00:01
     CLOCK: [2020-03-31 Tue 20:39]--[2020-03-31 Tue 20:55] => 00:16
    :END:
 
** Column View

  Column mode in Emacs lets you look at your document headings as if they were a table and visualize the
  properties (of your choosing) in the various headings as columns in a table. We don't yet have support for this
  mode in sublime! But we will eventually.

  For now, we have a piece of this... The columnview dynamic block

  This table was NOT generated from this file. Columnview uses a configuration comment that looks something like so:

  #+COLUMNS: %ITEM(Task) %Effort(Effort) %TODO(Todo) %DEADLINE(Deadline) %ALLTAGS(Tags) %TIMESTAMP(Time) %TIMESTAMP_IA(Inactive) %PRIORITY(Priority)

  Some of these specify the heading, some properties (Like the Effort entry) Some of them DEADLINE details etc.
  More information can be found in our little gantt chart demo:

  [[https://github.com/ihdavids/orgextended_docs/blob/master/learning_gantt_example.org][Gantt Demo]]

  Or in the Org Manual:

  [[https://orgmode.org/manual/Capturing-column-view.html#Capturing-column-view][Column View]] 

  #+BEGIN: columnview  :hlines nil :id global :indent t :maxdepth 2 :exclude-tags (ExcludeMe)
   | Task                       | Effort | Todo | Deadline             | Tags  | Time                 | Inactive             | Priority |
   | 1.1.26                     |        |      |                      | a     |                      |                      |          |
   | ..Source Blocks            | 2d     | DONE |                      | a     |                      |                      |          |
   | ..Folding                  |        |      |                      | a     |                      |                      |          |
   | ..Properties               | 2d     |      | 2021-03-09 Tue 20:55 | a     |                      |                      |          |
   | ..Spreadsheets Preview V11 | 4h     |      |                      | a tag | 2021-03-09 Tue 14:53 |                      |          |
   | ..ColumnView Dynamic Block | 1d     |      |                      | a     |                      | 2021-03-09 Tue 11:00 | B        |
  #+END:

* Named Object Target

  Object in orgmode can have a name. This is here so we have something to target from the links example above.

  #+NAME: MyNamedObject
  | Hello      | World |
  | Some Table |       |


* ID Target Example
  :PROPERTIES:
    :ID: 33da3712-51b7-485c-b69d-f54dd266543f
  :END:

  Headings can have a generated ID. This is here so we have something to target in the links example above.

* Custom IDs
  :PROPERTIES:
    :CUSTOM_ID: My-Custom-Id
  :END:

  Headings can have a custom ID. This is here so we have something to target in the links example above.

* Table Remote Test

  One of the interesting abilities that comes along with tables is the ability to reference data in other tables.
  Here is an example of referencing the data in the table above in Named Object Target.

  | a          | b | c | d | e |
  | Some Table |   |   |   |   |
  #+TBLFM:@2$1=remote("MyNamedObject",@2$1)

* Time Data
  :PROPERTIES:
    :CUSTOM_ID: my-custom-id
  :END:
  These are some common time values used in testing the agenda.
  The dates and times will be out of date. Replace these with your own
  to test the agenda.

  There are some todos and some non todos. Both can appear in the agenda when active.

** TODO Time range
   <2021-02-16 Thu 16:00-17:00> 

** TODO Scheduled Date
   SCHEDULED: <2021-02-10 Wed 16:49> 
 
** TODO Deadline Date w Warning
   SCHEDULED: <2021-02-10 Wed 16:49 -2d> 
 
** TODO Test Recurrence
   <2021-02-16 Tue 14:10-15:10 +1d>
 
** TODO Recurring Active
    <2021-02-15 Wed 14:40 +1d> 
 
** Time range
   <2021-02-16 Thu 16:00-17:00> 

** Scheduled Date
   SCHEDULED: <2021-02-10 Wed 16:49> 
 
** Deadline Date w Warning
   SCHEDULED: <2021-02-10 Wed 16:49 -2d> 
 
** Test Recurrence
   <2021-02-16 Tue 14:10-15:10 +1d>
 
** Recurring Active
    <2021-02-15 Wed 14:40 +1d> 

** TODO Recurring BUT ARCHIVED                                            :ARCHIVED:
    <2021-02-15 Wed 14:40 +1d> 



$e^{i\pi}+1=0$



[[http://reg.ca]] 
** DONE Done task1 
   CLOSED: [2021-05-13 Thu 23:14]

** DONE Task 2
   CLOSED: [2010-05-13 Thu 23:14]

   

* TODO Hi


* Clocker
   #+BEGIN: clocktable :scope subtree :level 2
  |    Heading    |  Time |       |
  |---------------+-------+-------|
  | Clocker       | 00:18 |       |
  | \_ Clocktest1 |       | 00:18 |
   #+END:
** Clocktest1
  :LOGBOOK:
    CLOCK: [2021-05-29 Sat 00:05]--[2021-05-29 Sat 00:23] => 00:17
    CLOCK: [2021-05-29 Sat 00:23]--[2021-05-29 Sat 00:23] => 00:00
    CLOCK: [2021-05-29 Sat 00:23]--[2021-05-29 Sat 00:23] => 00:00
  :END:

* PerlTest

  #+NAME: input-table
  | a | b | c |
  | 1 | 2 | 3 |
  
  #+BEGIN_SRC perl :var DATA=input-table :results table
    foreach(my $m = 0; $m <= $#DATA; $m++)
    {   
      for(my $n = 0; $n <= $#{$DATA[$m]} ; $n++)
      {  
        print "$DATA[$m][$n] ";  
      }  
      print "\n";  
    } 
  #+END_SRC
  #+RESULTS:
  | a | b | c |
  | 1 | 2 | 3 |

  #+BEGIN_SRC perl :results value
    return "Hello world"
  #+END_SRC
  #+RESULTS:
  : Hello world

* CSharpTest
  
  #+BEGIN_SRC csharp
    using System;
    Console.Writeline("Hello world");
  #+END_SRC
%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - org
  - org_archive
# Generic parent scope of the file
scope: text.orgmode
version: 2

variables:
  datetime: "<\\d{4}-\\d{2}-\\d{2}(?:\\s*\\w{3})?\\s*(\\d{2}\\:\\d{2}(-\\d{2}\\:\\d{2})?)?\\s*([+]*\\d[wdmy])?>"
  unscheddatetime: "\\[\\d{4}-\\d{2}-\\d{2}(?:\\s*\\w{3})?\\s*(\\d{2}\\:\\d{2})?\\s*([+]*\\d[wdmy])?\\]"
  tags: "(^|):[\\w\\d:]+:"
  priority: '\s*\[((\#A)|(\#B)|(\#C)|(\#D)|(\#E)|(\#[a-zA-Z0-9]+))\]\s+'
  state: (TODO)|(BLOCKED)|(WAITING)|(CANCELLED)|(DONE)|(MEETING)|(PHONE)|(NOTE)|(IN-PROGRESS)|(DOING)|(NEXT)|(REASSIGNED)
  beginmrk: BEGIN_SRC|begin_src
  endmrk:   END_SRC|end_src
  beginsrc: '(\s*\#\+({{beginmrk}})\s+)'
  endsrc: '(\s*\#\+({{endmrk}})\s*)'
contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  #prototype:
  #- include: comments
  header-matches:
    - match: $
      pop: true
    - match: ({{state}}\s+)?({{priority}})?[^\[\]:\n]*(\[\d*[/%]\d*\])?({{tags}})?
      captures:
        2: variable.parameter orgmode.state.todo
        3: variable.parameter orgmode.state.blocked
        4: variable.parameter orgmode.state.waiting
        5: variable.parameter orgmode.state.cancelled
        6: variable.parameter orgmode.state.done
        7: variable.parameter orgmode.state.meeting
        8: variable.parameter orgmode.state.phone
        9: variable.parameter orgmode.state.note
        10: variable.parameter orgmode.state.inprogress
        11: variable.parameter orgmode.state.doing
        12: variable.parameter orgmode.state.next
        13: variable.parameter orgmode.state.reassigned
        14: string.quoted orgmode.priority
        15: string.quoted orgmode.priority.value
        16: string.quoted orgmode.priority.value.a
        17: string.quoted orgmode.priority.value.b
        18: string.quoted orgmode.priority.value.c
        19: string.quoted orgmode.priority.value.d
        20: string.quoted orgmode.priority.value.e
        21: string.quoted orgmode.priority.value.general
        22: string.quoted orgmode.checkbox.summary
        23: entity.name.tag.orgmode orgmode.tags.header
  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    #- include: keywords
    #- include: numbers
    #- include: strings
      # --- # Todo investigate what this actually is?
    - match: ^\s*\-\-\- [^\n]*
      scope: comment orgmode.page
      # ~~~~~ # Todo investigate what this is?
    - match: ^\s*[~]+ [^\n]*
      scope: comment orgmode.break


      # Generic headline, TODO: Make multiple of these so we can color them
      # and sub captures so we can hide the extraneous stars
      # embed_scope: entity.name.function.orgmode orgmode.headline
    - match: ^\s*[*]\s+
      push:
        - meta_scope: entity.name.class.orgmode orgmode.headline
        - include: header-matches
    - match: ^\s*([*])[*]\s+
      captures:
        1: comment  orgmode.preamble
      push:
        - meta_scope: entity.name.function.orgmode orgmode.headline2
        - include: header-matches
    - match: ^\s*([*][*])[*]\s+
      captures:
        1: comment orgmode.preamble
      push:
        - meta_scope: entity.other.attribute-name.orgmode orgmode.headline3
        - include: header-matches
    - match: ^\s*([*][*][*])[*]\s+
      captures:
        1: comment orgmode.preamble
      push:
        - meta_scope: entity.name.section.orgmode orgmode.headline4
        - include: header-matches
    - match: ^\s*([*][*][*][*])[*]\s+
      captures:
        1: comment orgmode.preamble
      push:
        - meta_scope: entity.name.type.orgmode orgmode.headline5
        - include: header-matches
    - match: ^\s*([*][*][*][*][*])[*]\s+
      captures:
        1: comment orgmode.preamble
      scope: orgmode.headline6
      push:
        - meta_scope: entity.name.filename orgmode.headline6
        - include: header-matches
    - match: ^\s*([*][*][*][*][*][*])[*]\s+
      captures:
        1: comment orgmode.preamble
      scope: orgmode.headline7
      push:
        - meta_scope: entity.name.filename orgmode.headline7
        - include: header-matches
    - match: ^\s*([*][*][*][*][*][*][*])[*]\s+
      captures:
        1: comment orgmode.preamble
      scope: orgmode.headline8
      push:
        - meta_scope: entity.name.filename orgmode.headline8
        - include: header-matches
    - match: ^\s*([*][*][*][*][*][*][*][*])[*]\s+
      captures:
        1: comment orgmode.preamble
      scope: orgmode.headline9
      push:
        - meta_scope: entity.name.filename orgmode.headline9
        - include: header-matches

    - match: ^\s*(\|.+\|)
      captures:
        1: markup.raw.block orgmode.table.block
      scope: orgmode.table
      # DEADLINE: <DATETIME>
    - match: "(DEADLINE:)\\s+({{datetime}})"
      captures:
        1: keyword orgmode.statekeyword
        2: markup.italic orgmode.datetime
      scope: orgmode.deadline
      # SCHEDULED: <DATETIME>
    - match: "(SCHEDULED:)\\s+({{datetime}})"
      captures:
        1: keyword orgmode.statekeyword
        2: markup.italic orgmode.datetime
      scope: orgmode.scheduled
      # CLOSED: [DATETIME]
    - match: "(CLOSED:)\\s+({{unscheddatetime}})"
      captures:
        1: keyword orgmode.statekeyword
        2: markup.italic orgmode.unscheddatetime
      scope: orgmode.closed
      # numbered list
    - match: "^\\s*([0-9]+[.)])\\s+(([^:]+\\s+)(::))?"
      captures:
        1: constant.numeric
        3: keyword orgmode.definition
        4: punctuation orgmode.definition.marker
      scope: orgmode.numberedlist
      # bullet list
    - match: "^\\s*(\\-) (([^:]+\\s+)(::))?"
      captures:
        1: constant.character
        3: keyword orgmode.definition
        4: punctuation orgmode.definition.marker
      scope: orgmode.tack.minus
      # bullet list
    - match: "^\\s*(\\+) (([^:]+\\s+)(::))?"
      captures:
        1: constant.character
        3: keyword orgmode.definition
        4: punctuation orgmode.definition.marker
      scope: orgmode.tack.plus
      # To follow up: -> and =>
    - match: "^\\s*(\\-\\>|\\=\\>) "
      scope: orgmode.follow_up
      # [-] Checkbox
    - match: (\[[ ]\])\s?
      scope: string orgmode.checkbox
    - match: (\[([xX])\])\s?
      scope: orgmode.checkbox.checked
      captures:
        1: string
        2: keyword orgmode.checkbox.checked 
    - match: (\[([\-])\])\s?
      scope: orgmode.checkbox.blocked
      captures:
        1: string
        2: constant.other orgmode.checkbox.blocked
      # [#/#] Checkbox summary
    - match: (\[\d*[/%]\d*\])
      scope: string orgmode.checkbox.summary
      # [[link]]
    - match: \[(\[([^\]]+)\])\]
      captures:
        1: orgmode.link.textblock
        2: comment orgmode.link.text.href
      scope: markup.underline.link orgmode.link
      # [[link][name]]
    - match: \[(\[([^\]]+)\])(\[([^\]]+)\])\]
      captures:
        1: orgmode.link.hrefblock
        2: comment orgmode.link.href
        3: orgmode.link.textblock
        4: markup.bold orgmode.link.text
      scope: markup.underline.link orgmode.link
    - match: http[s]?://[^ \t]+
      scope: orgmode.link.href
    - match: \b([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})\b
      scope: orgmode.email
      # {{{results(=hello=)}}}
    - match: '\{\{\{results\(([^)]+)\)\}\}\}'
      scope: comment orgmode.results.inline
      captures:
        1: keyword orgmode.results.value
      # {numerical_value}
    - match: \{(\d+)\}
      scope: orgmode.link.internal.number
      # {{headline}}
    - match: \{\{(.+?)\}\}
      scope: orgmode.link.internal.headline
      # :TAG:
    - match: "(^|\\s):[\\w\\d:]+:"
      scope: entity.name.tag.orgmode orgmode.tags
      # [code] block, not sure what these are.
    - match: \[code\]\s*
      push:  code
    - match: ^\s*Traceback \(most recent call last\):\s*$
      push: pythonstack

    - match: \*[^*]+\*
      scope: markup.bold orgmode.bold

    - match: /[^/]+/
      scope: markup.italic orgmode.italics

    - match: _[^_]+_
      scope: markup.underline orgmode.underline

    - match: \+[^\+]+\+
      scope: markup.underline orgmode.strikethrough

    - match: ~[^~]+~
      scope: orgmode.code

    - match: =[^=]+=
      scope: orgmode.verbatim


    - match: '<<'
      scope: orgmode.target.bracket
      push:
        - meta_scope: orgmode.target
        - match: '>>'
          scope: orgmode.target.bracket
          pop: true

    - match: '(\s*\#\+(BEGIN_CENTER|begin_center)\s*)'
      captures:
        1: orgmode.fence
      push:
        - meta_scope: constant.other orgmode.raw.block
        - meta_content_scope: markup.raw.block orgmode.raw.block
        - match: '(\s*\#\+(END_CENTER|end_center)\s*)'
          captures:
            1: orgmode.fence
          pop: true
    - match: '(\s*\#\+(BEGIN_VERSE|begin_verse)\s*)'
      captures:
        1: orgmode.fence
      push:
        - meta_scope: constant.other orgmode.raw.block
        - meta_content_scope: markup.raw.block orgmode.raw.block
        - match: '(\s*\#\+(END_VERSE|end_verse)\s*)'
          captures:
            1: orgmode.fence
          pop: true
    - match: '(\s*\#\+(BEGIN_QUOTE|begin_quote)\s*)'
      captures:
        1: orgmode.fence
      push:
        - meta_scope: constant.other orgmode.raw.block
        - meta_content_scope: markup.raw.block orgmode.raw.block
        - match: '(\s*\#\+(END_QUOTE|end_quote)\s*)'
          captures:
            1: orgmode.fence
          pop: true
    - match: '(\s*\#\+(BEGIN_NOTES|begin_notes)\s*)'
      captures:
        1: constant.other orgmode.fence
      embed: scope:text.orgmode
      escape: '(\s*\#\+(END_NOTES|end_notes)\s*)'
      embed_scope: markup.raw.block orgmode.raw.block
      escape_captures:
        1: constant.other orgmode.fence

    - match: '(\s*\#\+(BEGIN_EXAMPLE|begin_example)\s*)'
      captures:
        1: constant.other orgmode.fence
      embed: scope:text.orgmode
      escape: '(\s*\#\+(END_EXAMPLE|end_example)\s*)'
      embed_scope: markup.raw.block orgmode.raw.block
      escape_captures:
        1: constant.other orgmode.fence
    {{INSERT_LANGUAGES_HERE}}
      # #+SOMETHING:
      # But not a dynamic block
      # Use negative look ahead to avoid matching begin and end dynamic blocks
    - match: '^\s*(\#\+(?!(TBLFM|tblfm|BEGIN|END|begin|end))([a-zA-Z][a-zA-Z0-9_-]+)(\s*\[[a-zA-Z0-9_-]+\]\s*)?\:)\s*(.*)'
      scope: orgmode.controltag
      captures:
        1: keyword orgmode.controltag.tag
        5: comment orgmode.controltag.text
      # #+TBLFM:
      # But not a dynamic block
      # Use negative look ahead to avoid matching begin and end dynamic blocks
    - match: '^\s*(\#\+(TBLFM|tblfm))\:\s*(.*)'
      scope: orgmode.table orgmode.controltag orgmode.tblfm
      captures:
        1: keyword orgmode.controltag.tag
        3: comment orgmode.controltag.text

    # #+BEGIN: NAME dynamic block support
    - match: '((\s*\#\+BEGIN:|\#\+begin:)\s+([a-zA-Z0-9]+)\s+(.*)?\s*)'
      captures:
        1: constant.other orgmode.fence.dynamicblock
        2: orgmode.fence.dynamicblock.begin
        3: keyword orgmode.fence.dynamicblock.name
        4: variable.parameter orgmode.fence.dynamicblock.params
      embed: scope:text.orgmode
      escape: '(^\s*\#\+END:\s*|\#\+end:\s*)'
      embed_scope: markup.raw.block orgmode.raw.block.dynamicblock
      escape_captures:
        1: constant.other orgmode.fence.dynamicblock.end
  code:
    - meta_scope: text
    - match: \s*\[/code\]
      pop: true

  pythonstack:
    - meta_scope: orgmode.python.traceback
    - match: "^\\s*\\w+: .+$"
      pop: true

